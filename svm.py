# -*- coding: utf-8 -*-
"""ML Homework 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UC6vx-vlPJqhZ1vthJfvLcaObiqff5tX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.svm import LinearSVC
from sklearn.svm import SVC

# Get data
df = pd.read_csv("breast_cancer.csv")
dfTrain = df[:500]
dfTest = df[500:]
X_train = dfTrain.drop("Class", axis=1).to_numpy()
Y_train = dfTrain["Class"].to_numpy()
X_test = dfTest.drop("Class", axis=1).to_numpy()
Y_test = dfTest["Class"].to_numpy()

C = [0.001, 0.01, 0.1, 1, 10, 100]
k = 10
scores_based_on_c = []
scores = []
sample_size = int(X_train.shape[0] / k)
test_start_location = 0

for c in C:
  for i in range(k):
  
    test_sample = X_train[test_start_location:test_start_location + sample_size, :]
    test_class = Y_train[test_start_location:test_start_location + sample_size]

    arr1 = X_train[:test_start_location, :]
    arr2 = X_train[test_start_location + sample_size:, :]
    arr1Class = Y_train[:test_start_location]
    arr2Class = Y_train[test_start_location + sample_size:]

    train_sample = None
    train_class = None
    if (len(arr1) == 0):
      train_sample = arr2
      train_class = arr2Class
    elif (len(arr2) == 0):
      train_sample = arr1
      train_class = arr1Class
    else:
      train_sample = np.concatenate((arr1, arr2), axis=0)
      train_class = np.concatenate((arr1Class, arr2Class))

    classifier = LinearSVC(C=c, random_state=0, tol=1e-5)
    classifier.fit(train_sample, train_class)
    score = classifier.score(test_sample, test_class)
    scores.append(score)

    test_start_location += sample_size

  scores_based_on_c.append(sum(scores)/10)
  scores = []
  test_start_location = 0
print(scores_based_on_c)

# Plot accuracies vs c
best_C_value = 10
plt.plot(C, scores_based_on_c)
plt.ylabel('Mean Cross Validation Accuracy')
plt.xlabel('C')
plt.show()

# Predict on test
classifier = LinearSVC(C=best_C_value)
classifier.fit(X_train, Y_train)
predictions = classifier.predict(X_test)

# Report results
print("Accuracy: ", np.mean(predictions == Y_test) * 100)

# Metrics
print("Metrics")
TP = sum(predictions[np.where(predictions == Y_test)] == 1)
TN = sum(predictions[np.where(predictions == Y_test)] == 0)
FP = sum(predictions[np.where(predictions != Y_test)] == 1)
FN = sum(predictions[np.where(predictions != Y_test)] == 0)
precision = TP / (TP + FP)
recall = TP / (TP + FN)
NPV = TN / (FN + TN)
FPR = FP / (TP + FP)
FDR = FP / (FN + TN)
F1 = 2 * precision * recall / (precision + recall)
F2 = 5 * precision * recall / ((4 * precision) + recall)
print("Precision: ", precision)
print("Recall: ", recall)
print("NPV: ", NPV)
print("FPR: ", FPR)
print("FDR: ", FDR)
print("F1: ", F1)
print("F2: ", F2)
print("Confusion Matrix")
print("TP: ", TP, "FP: ", FP)
print("FN: ", FN, "TN: ", TN)

# Get data
df = pd.read_csv("breast_cancer.csv")
dfTrain = df[:500]
dfTest = df[500:]
X_train = dfTrain.drop("Class", axis=1).to_numpy()
Y_train = dfTrain["Class"].to_numpy()
X_test = dfTest.drop("Class", axis=1).to_numpy()
Y_test = dfTest["Class"].to_numpy()

gammas = [0.0625, 0.125, 0.25, 1, 2]
k = 10
scores_based_on_gamma = []
scores = []
sample_size = int(X_train.shape[0] / k)
test_start_location = 0

for gamma in gammas:
  for i in range(k):
  
    test_sample = X_train[test_start_location:test_start_location + sample_size, :]
    test_class = Y_train[test_start_location:test_start_location + sample_size]

    arr1 = X_train[:test_start_location, :]
    arr2 = X_train[test_start_location + sample_size:, :]
    arr1Class = Y_train[:test_start_location]
    arr2Class = Y_train[test_start_location + sample_size:]

    train_sample = None
    train_class = None
    if (len(arr1) == 0):
      train_sample = arr2
      train_class = arr2Class
    elif (len(arr2) == 0):
      train_sample = arr1
      train_class = arr1Class
    else:
      train_sample = np.concatenate((arr1, arr2), axis=0)
      train_class = np.concatenate((arr1Class, arr2Class))

    classifier = SVC(kernel='rbf', gamma=gamma)
    classifier.fit(train_sample, train_class)
    score = classifier.score(test_sample, test_class)
    scores.append(score)

    test_start_location += sample_size

  scores_based_on_gamma.append(sum(scores)/10)
  scores = []
  test_start_location = 0
print(scores_based_on_gamma)

# Plot accuracies vs c
plt.plot(gammas, scores_based_on_gamma)
plt.ylabel('Mean Cross Validation Accuracy')
plt.xlabel('gamma')
plt.savefig('books_read.png')
plt.show()

# Predict on test
best_gamma_value = 0.125
classifier = SVC(kernel='rbf', gamma=best_gamma_value)
classifier.fit(X_train, Y_train)
predictions = classifier.predict(X_test)

# Report results
print("Accuracy: ", np.mean(predictions == Y_test) * 100)
TP = sum(predictions[np.where(predictions == Y_test)] == 1)
TN = sum(predictions[np.where(predictions == Y_test)] == 0)
FP = sum(predictions[np.where(predictions != Y_test)] == 1)
FN = sum(predictions[np.where(predictions != Y_test)] == 0)
precision = TP / (TP + FP)
recall = TP / (TP + FN)
NPV = TN / (FN + TN)
FPR = FP / (TP + FP)
FDR = FP / (FN + TN)
F1 = 2 * precision * recall / (precision + recall)
F2 = 5 * precision * recall / ((4 * precision) + recall)
print("Precision: ", precision)
print("Recall: ", recall)
print("NPV: ", NPV)
print("FPR: ", FPR)
print("FDR: ", FDR)
print("F1: ", F1)
print("F2: ", F2)
print("Confusion Matrix")
print("TP: ", TP, "FP: ", FP)
print("FN: ", FN, "TN: ", TN)